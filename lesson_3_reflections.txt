1) When would you want to use a remote repository rather than keeping all your work local?
A remote repository could be beneficial in several cases, such as when multiple people are collaborating on a project or when you need to access the project from more than one location (such as from work and from home).  Having a remote repository allows the project to be accessed and modified from multiple locations, providing versatility and team collaboration capabilities, plus it provides a centralized storage of the work which can serve as an off-site backup of your project data.

2) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
One instance where automatically syncing your local respository with the remote repository would be in the case of team collaboration.  If you are working on the same file that someone else on your team is working on, automatically syncing from the remote could cause conflicts between your version and a version that someone else may  have pushed to the remote repository.  This holds true for added and removed files as well.

3) Describe the differences between forks, clones, and branches. When would you use one instead of another?
Fork: creates a copy directly from a source GitHub repository to your own GitHub repository
Clone: creates a copy of one repository (local or GitHub) to another repository (local)
Branch: creates an independent branch on an existing repository
You would use a fork to make a copy of an existing GitHub repository that you can modify while giving credit to the author of the original.  You would clone when you want to make a copy of any repository to work on.  You would use a branch when you want to create another path to modify an existing repository and allow modifications in parallel.

4) What is the benefit of having a copy of the last known state of the remote stored locally?
This serves two main purposes.  First, it allows you to compare your local repository to the last known state of the remote.  Second, it allows you to compare your local copy of the remote with a current version of the remote to identify changes to the remote repository that are out of sync with your local repository.